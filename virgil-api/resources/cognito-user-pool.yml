# CloudFormation file
Description: Resources implementing a custom Cognito User Pool

Resources:
  # Our User Pool configuration
  VirgilCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Recreated the following settings from an existing user pool
      UserPoolName: ${self:custom.stage}-virgil-user-pool

      UsernameAttributes:
        - phone_number

      UsernameConfiguration:
        CaseSensitive: False

      AutoVerifiedAttributes:
        - phone_number

      SmsVerificationMessage:
        Your Virgil verification code is {####}

      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt: [ SNSRole, Arn ]
        ExternalId: virgil-external

      EmailConfiguration:
        EmailSendingAccount:
          DEVELOPER
        From:
          Virgil <hello@virgilcard.com>
        ReplyToEmailAddress:
          hello@virgilcard.com
        SourceArn:
          ${env:AWS_SES_VERIFIED_ADDRESS_ARN}

      MfaConfiguration:
        OPTIONAL

      Policies:
        PasswordPolicy: 
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
          TemporaryPasswordValidityDays: 1

      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: False

      Schema:
        - Name: custom:first_name
          AttributeDataType: String
          Required: False
          Mutable: True
        - Name: custom:last_name
          AttributeDataType: String
          Required: False
          Mutable: True
        - Name: custom:email_name
          AttributeDataType: String
          Required: False
          Mutable: True

  # User Pool Client configuration for our client applications (i.e. React)
  VirgilCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: ${self:custom.stage}-virgil-user-pool-client
      UserPoolId:
        Ref: VirgilCognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  # IAM role that allows Cognito to send SNS messages
  SNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"


# Prints Id of UserPool and UserPoolClient that is created
Outputs:
  UserPoolId:
    Value:
      Ref: VirgilCognitoUserPool
  UserPoolClientId:
    Value:
      Ref: VirgilCognitoUserPoolClient